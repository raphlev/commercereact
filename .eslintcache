[{"D:\\VSCode\\commerceReact\\src\\index.js":"1","D:\\VSCode\\commerceReact\\src\\App.js":"2","D:\\VSCode\\commerceReact\\src\\lib\\commerce.js":"3","D:\\VSCode\\commerceReact\\src\\components\\index.js":"4","D:\\VSCode\\commerceReact\\src\\components\\Products\\Products.jsx":"5","D:\\VSCode\\commerceReact\\src\\components\\Cart\\Cart.jsx":"6","D:\\VSCode\\commerceReact\\src\\components\\Navbar\\Navbar.jsx":"7","D:\\VSCode\\commerceReact\\src\\components\\Navbar\\styles.js":"8","D:\\VSCode\\commerceReact\\src\\components\\Cart\\styles.js":"9","D:\\VSCode\\commerceReact\\src\\components\\Products\\styles.js":"10","D:\\VSCode\\commerceReact\\src\\components\\Products\\Product\\Product.jsx":"11","D:\\VSCode\\commerceReact\\src\\components\\Products\\Product\\styles.js":"12","D:\\VSCode\\commerceReact\\src\\components\\Cart\\CartItem\\CartItem.jsx":"13","D:\\VSCode\\commerceReact\\src\\components\\Cart\\CartItem\\styles.js":"14","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Checkout\\Checkout.jsx":"15","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Checkout\\styles.js":"16","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\AddressForm.jsx":"17","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\CustomTextField.jsx":"18","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\PaymentForm.jsx":"19","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Review.jsx":"20"},{"size":151,"mtime":1609403002571,"results":"21","hashOfConfig":"22"},{"size":2986,"mtime":1610485629596,"results":"23","hashOfConfig":"22"},{"size":138,"mtime":1609578574641,"results":"24","hashOfConfig":"22"},{"size":235,"mtime":1610200983092,"results":"25","hashOfConfig":"22"},{"size":1332,"mtime":1609697462266,"results":"26","hashOfConfig":"22"},{"size":2297,"mtime":1610184544425,"results":"27","hashOfConfig":"22"},{"size":1347,"mtime":1609611458139,"results":"28","hashOfConfig":"22"},{"size":1613,"mtime":1609696489921,"results":"29","hashOfConfig":"22"},{"size":570,"mtime":1606580861000,"results":"30","hashOfConfig":"22"},{"size":287,"mtime":1606580861000,"results":"31","hashOfConfig":"22"},{"size":1650,"mtime":1609698443028,"results":"32","hashOfConfig":"22"},{"size":396,"mtime":1606580861000,"results":"33","hashOfConfig":"22"},{"size":1432,"mtime":1609699885367,"results":"34","hashOfConfig":"22"},{"size":333,"mtime":1609699802378,"results":"35","hashOfConfig":"22"},{"size":4229,"mtime":1610492179396,"results":"36","hashOfConfig":"22"},{"size":1210,"mtime":1610186458154,"results":"37","hashOfConfig":"22"},{"size":6740,"mtime":1610492254090,"results":"38","hashOfConfig":"22"},{"size":846,"mtime":1610490202969,"results":"39","hashOfConfig":"22"},{"size":2559,"mtime":1610493166722,"results":"40","hashOfConfig":"22"},{"size":892,"mtime":1610203239722,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"wgxmbj",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\VSCode\\commerceReact\\src\\index.js",[],["86","87"],"D:\\VSCode\\commerceReact\\src\\App.js",[],"D:\\VSCode\\commerceReact\\src\\lib\\commerce.js",[],"D:\\VSCode\\commerceReact\\src\\components\\index.js",[],"D:\\VSCode\\commerceReact\\src\\components\\Products\\Products.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\Cart\\Cart.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\Navbar\\Navbar.jsx",["88","89"],"import React from 'react';\r\nimport { AppBar, Toolbar, IconButton, Badge, MenuItem, Menu, Typography} from '@material-ui/core';\r\nimport { ShoppingCart } from '@material-ui/icons';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport logo from '../../assets/commerce.png';\r\nimport useStyles from \"./styles\";\r\n\r\nconst Navbar = ({ totalItems }) => {\r\n  const classes = useStyles();\r\n  const Location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"fixed\" className={classes.appBar} color=\"inherit\">\r\n        <Toolbar>\r\n          <Typography component={Link} to=\"/\" variant=\"h6\" className={classes.title} color=\"inherit\" >\r\n            <img src={logo} alt=\"E-sale\" height=\"25px\" className={classes.image} />\r\n            E-Sales\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          {Location.pathname === \"/\" && (\r\n            <div className={classes.button}>\r\n              {/* <Link to=\"/cart\">go to cart</Link> */}\r\n              <IconButton component={Link} to=\"/cart\" aria-label=\"Show cart Items\" color=\"inherit\" >\r\n                <Badge badgeContent={totalItems} color=\"secondary\">\r\n                  <ShoppingCart />\r\n                </Badge>\r\n              </IconButton>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","D:\\VSCode\\commerceReact\\src\\components\\Navbar\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\Cart\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\Products\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\Products\\Product\\Product.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\Products\\Product\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\Cart\\CartItem\\CartItem.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\Cart\\CartItem\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Checkout\\Checkout.jsx",["90"],"import React, { useState, useEffect } from 'react';\r\nimport { CssBaseline, Paper, Stepper, Step, StepLabel, Typography, CircularProgress, Divider, Button } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport { commerce } from '../../../lib/commerce';\r\nimport AddressForm from '../AddressForm';\r\nimport PaymentForm from '../PaymentForm';\r\nimport useStyles from './styles';\r\n\r\nconst steps = ['Shipping address', 'Payment details'];\r\n\r\nconst Checkout = ({ cart, onCaptureCheckout, order, error }) => {\r\n  const [checkoutToken, setCheckoutToken] = useState(null);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [shippingData, setShippingData] = useState({});//empty object\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const nextStep = () => setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  const backStep = () => setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n\r\n  useEffect(() => {\r\n    if (cart.id) {\r\n      // inside useEffect we cannot use async unless it is a new function\r\n      // that means that we cannot have useEffect( async () => {},[]), so we \r\n      // need to declare a new asyn function inside it and call it at the end\r\n      const generateToken = async () => {\r\n        try {\r\n          const token = await commerce.checkout.generateToken(cart.id, { type: 'cart' });// second argument { type: 'cart' } is an object of options\r\n          // console.log(token);\r\n          setCheckoutToken(token);\r\n        } catch {\r\n          if (activeStep !== steps.length) history.push('/');\r\n        }\r\n      };\r\n      // Now we call the asyn func\r\n      generateToken();\r\n    }\r\n  }, [cart]); \r\n  // called each time the cart is changing \r\n  // to have re-generated token \r\n  // (if dependency array left empty [] that would be called only when component did mount)\r\n  // reminder: step 1 component render JSX => then execute component did mount = useEffect\r\n  \r\n\r\n  // why do we use next function here that is passed to AdressForm component: \r\n  // because we need to store in the state of Checkout component the shipping data which are passed from Checkout to the next step PaymentForm component\r\n  const next = (data) => {\r\n    setShippingData(data);\r\n\r\n    nextStep();\r\n  };\r\n\r\n  let Confirmation = () => (order.customer ? (\r\n    <>\r\n      <div>\r\n        <Typography variant=\"h5\">Thank you for your purchase, {order.customer.firstname} {order.customer.lastname}!</Typography>\r\n        <Divider className={classes.divider} />\r\n        <Typography variant=\"subtitle2\">Order ref: {order.customer_reference}</Typography>\r\n      </div>\r\n      <br />\r\n      <Button component={Link} variant=\"outlined\" type=\"button\" to=\"/\">Back to home</Button>\r\n    </>\r\n  ) : (\r\n    <div className={classes.spinner}>\r\n      <CircularProgress />\r\n    </div>\r\n  ));\r\n\r\n  if (error) {\r\n    Confirmation = () => (\r\n      <>\r\n        <Typography variant=\"h5\">Error: {error}</Typography>\r\n        <br />\r\n        <Button component={Link} variant=\"outlined\" type=\"button\" to=\"/\">Back to home</Button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const Form = () => (activeStep === 0\r\n    ? <AddressForm checkoutToken={checkoutToken} nextStep={nextStep} setShippingData={setShippingData} next={next} />\r\n    : <PaymentForm checkoutToken={checkoutToken} nextStep={nextStep} backStep={backStep} shippingData={shippingData} onCaptureCheckout={onCaptureCheckout} />);\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <div className={classes.toolbar} />\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <Typography variant=\"h4\" align=\"center\">Checkout</Typography>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map((label) => (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n          {/* only render the Form if we have the checkoutToken \r\n              otherwise the Form will try to render without the Token */}\r\n          {activeStep === steps.length ? <Confirmation /> : checkoutToken && <Form />} \r\n        </Paper>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Checkout\\styles.js",[],"D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\AddressForm.jsx",["91","92"],"import React, { useState, useEffect } from 'react';\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography } from '@material-ui/core';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\n\nimport { commerce } from '../../lib/commerce';\nimport FormInput from './CustomTextField';\n\nconst AddressForm = ({ checkoutToken, next }) => {\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState('');\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState('');\n  const methods = useForm();\n\n  // const countries = Object.entries(shippingCountries).map(([code, name]) => ({ id: code, label: name }));\n            // Object.entries = convert an object into a 2D array, \n            // map = transform from a 2D array of code,name into an array of objects with id and label \n  // console.log(countries); = array of countries with id and label\n  // const subdivisions = Object.entries(shippingSubdivisions).map(([code, name]) => ({ id: code, label: name }));\n            // Object.entries = convert an object into a 2D array, \n            // map = transform from a 2D array of code,name into an array of objects with id and label \n  // console.log(subdivisions); = array of subdivisions with id and label\n  // const options = shippingOptions.map((sO) => ({ id: sO.id, label: `${sO.description} - (${sO.price.formatted_with_symbol})` }));\n  // console.log(options); = array of options with id and label being a template string of other attributes\n\n  const fetchShippingCountries = async (checkoutTokenId) => {\n    const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n\n    setShippingCountries(countries); // counbtries is an object - check console.log of this object\n    setShippingCountry(Object.keys(countries)[0]); // first element of object being an array [FR,EN,..] and we want to fetch the first value\n  };\n\n  const fetchSubdivisions = async (countryCode) => {\n    const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]); // select the first subdivision available\n  };\n\n  const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n\n    setShippingOptions(options);\n    setShippingOption(options[0].id); // select the first shipping option available\n  };\n\n  useEffect(() => {\n    fetchShippingCountries(checkoutToken.id);\n  }, []); // dependency array left empty so we want it executed when component did mount\n\n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisions(shippingCountry);\n  }, [shippingCountry]);\n\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>Shipping address</Typography>\n      <FormProvider {...methods}>\n        {/*\n         hook Form needs a useForm method in which all the 6 Input proprties \n         are passed automatically in data argument\n         we also need to pass the next function with a new object as argument which contain 9 attributes \n         current 6 Input proprties by using the spread operator on input data argument\n         + other propperties of the selected shipping country, subdivision and option\n         why do we use next function here that is passed from AdressForm component: \n         because we need to store in the state of Checkout component the shipping data which are passed from Checkout to the next step PaymentForm component\n            */}\n        <form onSubmit={methods.handleSubmit((data) => next({ ...data, shippingCountry, shippingSubdivision, shippingOption }))}>\n          <Grid container spacing={3}>\n            <FormInput required=\"required\" name=\"firstName\" label=\"First name\" />\n            <FormInput required=\"required\" name=\"lastName\" label=\"Last name\" />\n            <FormInput required=\"required\" name=\"address1\" label=\"Address line 1\" />\n            <FormInput required=\"required\" name=\"email\" label=\"Email\" />\n            <FormInput required=\"required\" name=\"city\" label=\"City\" />\n            <FormInput required=\"required\" name=\"zip\" label=\"Zip / Postal code\" />\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Country</InputLabel>\n              <Select value={shippingCountry} fullWidth onChange={(e) => setShippingCountry(e.target.value)}>\n                {/* {console.log(Object.entries(shippingCountries))} array of arrays of key,value pairs*/}\n                {/* see console.log(countries) above */}\n                {Object.entries(shippingCountries).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>{item.label}</MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Subdivision</InputLabel>\n              <Select value={shippingSubdivision} fullWidth onChange={(e) => setShippingSubdivision(e.target.value)}>\n                {Object.entries(shippingSubdivisions).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>{item.label}</MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Options</InputLabel>\n              <Select value={shippingOption} fullWidth onChange={(e) => setShippingOption(e.target.value)}>\n                {shippingOptions.map((sO) => ({ id: sO.id, label: `${sO.description} - (${sO.price.formatted_with_symbol})` })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>{item.label}</MenuItem>\n                ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <br />\n          {/* a div with inline styles - we don't need to create a new style js file */}\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Button component={Link} variant=\"outlined\" to=\"/cart\">Back to Cart</Button>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Next</Button>\n          </div>\n        </form>\n      </FormProvider>\n    </>\n  );\n};\n\nexport default AddressForm;\n","D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\CustomTextField.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\PaymentForm.jsx",[],"D:\\VSCode\\commerceReact\\src\\components\\CheckoutForm\\Review.jsx",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":46,"nodeType":"99","messageId":"100","endLine":2,"endColumn":54},{"ruleId":"97","severity":1,"message":"101","line":2,"column":56,"nodeType":"99","messageId":"100","endLine":2,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":39,"column":6,"nodeType":"104","endLine":39,"endColumn":12,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":52,"column":6,"nodeType":"104","endLine":52,"endColumn":8,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":60,"column":6,"nodeType":"104","endLine":60,"endColumn":27,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activeStep' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'checkoutToken.id'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'checkoutToken.id' and 'shippingCountry'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [activeStep, cart, history]",{"range":"121","text":"122"},"Update the dependencies array to be: [checkoutToken.id]",{"range":"123","text":"124"},"Update the dependencies array to be: [checkoutToken.id, shippingCountry, shippingSubdivision]",{"range":"125","text":"126"},[1680,1686],"[activeStep, cart, history]",[2860,2862],"[checkoutToken.id]",[3184,3205],"[checkoutToken.id, shippingCountry, shippingSubdivision]"]